"use strict";

const utils = require('./utils');

class RescatistasException{
    constructor(errorMessage){
        this.errorMessage = errorMessage;
    }
}

class Rescatista{
    constructor(nombre, email, phone, fechaRegistro, rescates){
        this._idRescatista = utils.generateUUID();
        this.nombre = nombre;
        this.email = email;
        this.phone = phone;
        this.fechaRegistro = fechaRegistro;
        this.rescates = rescates;
    }

    get idRescatista(){
        return this._idRescatista;
    }
    set idRescatista(value){
        throw new RescatistasException('IdRescatista is autogenerated!');
    }
    set nombre(value){
        if(value == '' || typeof value !== 'string'){
            throw new RescatistasException('Name must be a valid string and cannot be empty');
        }else{
            this._nombre = value;
        }
    }
    get nombre(){
        return this._nombre;
    }
    set email(value){
        if(typeof(value) !== 'string'){
            throw new RescatistasException('Email must be a valid string');
        }else{
            this._email = value;
        }
    }
    get phone(){
        return this._phone;
    }
    set phone(value){
        if(typeof(value) !== 'string'){
            throw new RescatistasException('Phone must be a valid string');
        }else{
            this._phone= value;
        }
    }
    get fechaRegistro(){
        return this._fechaRegistro;
    }
    set fechaRegistro(value){
        if(typeof(value) !== 'string'){
            throw new RescatistasException('Date must be a valid string (DD/MM/YYYY)');
            return;
        }else{
            this._fechaRegistro= value;
        }
    }
    get rescates(){
        return this._rescates;
    }
    set rescates(value){
        this._rescates = [];
        if(typeof value === 'string'){
            resc = JSON.parse(value);
            resc.forEach(rescate => this._rescates.push(rescate));
        }
        if(Array.isArray(value)){
            value.forEach(rescate => this._rescates.push(rescate));
        }else{
            throw new RescatistasException('Rescues must be a valid Array');
        }
    }

    //Creamos m√©todos para interctuar con el servidor
    static createFromJSON(jsonValue){
        let obj = JSON.parse(jsonValue);
        return Rescatista.createFromObject(obj);
    }

    static createFromObject(obj){
        let newResc = {};
        Object.assign(newResc, obj);//esto clona el obj principal
        Rescatista.cleanObject(newResc);
        let rescatista = new Rescatista(newResc._nombre, newResc._email, newResc._phone, newResc._fechaRegistro, newResc._rescates);
        //asignamos valores
        for(let property in newResc){
            rescatista[property] = newResc [property];
        }
        return rescatista;
    }
    static cleanObject(obj){
        const rescProperties = ['_idRescatista','_nombre', '_email', '_phone', '_fechaRegistro', '_rescates'];
        for (let property in obj) {
            if (!rescProperties.includes(property)){
                delete obj[property];
            }
        }
    }

}

module.exports = Rescatista;
